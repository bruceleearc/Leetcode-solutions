Problem 6 → Square of sums - sum of squares

```python
def sum_numbers(n):
    return n/2*(2*1+(n-1)*1)
def sum_squares(n):
    sum = 0
    for i in range(1,n+1):
        sum += i**2
    return sum
print(sum_numbers(100)**2-sum_squares(100))
```

Problem 7 → 10001st Prime

- Prime checker

```python
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.isqrt(n)) + 1):  # up to √n
        if n % i == 0:
            return False
    return True

print(is_prime(7))       # True
print(is_prime(12))      # False
print(is_prime(7919))    # True (and still fast!)

```

Problem 8 → Largest combination of 13 digits

```python
import math
n = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
def digit_extract(n,i,j):
    return (int(i) for i in str(n)[i:i+j])
products = []
for i in range(988):
    product = math.prod(digit_extract(n,i,13))
    products.append(product)
    print(product)
print(max(products))
```

Problem 9 → Pythag Triplet 

```python
import math
def checker(a):
    b = (1000**2/2-1000*a)/(1000-a)
    c = a**2+b**2
    if isinstance(c**0.5,int) == True:
        if a+b+c==1000:
            print(a,b,c)
            return a*b*c
        elif a+b+c != 1000:
            print(a,b,c)
            return False
    else:
        print(a,b,c)
        return False

print(200*375*425)

```

Problem 11 → Largest Grid product

```python
import math
grid_str = """
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
"""
grid = [list(map(int, row.split())) for row in grid_str.strip().splitlines()] # preview first 5 numbers of first row
def max_product_horizontal(j):
    nums = []
    products = []
    for k in range(0,20):
        for i in range(0,20):
            if j+3 < 19:
                nums.append(grid[k][j+i:j+i+4])
    for group in nums:
        if len(group) == 4:
            products.append(math.prod(group))
    return max(products)
print(max_product_horizontal(0))

def max_product_vertical(i):
    nums = []
    vals = []
    nums.append(grid[i:i+4])
    for k in range(0,20):
        group = []
        for j in range(4):
            group.append(nums[0][j][k])
        vals.append(group)
    return vals
products = []
totals = []
for i in range(0,20):
    if i+3 < 20:
        totals.append(max_product_vertical(1))

for group_list in totals:
    for group in group_list:
        products.append(math.prod(group))
print(max(products))

def max_product_diagonal_rl(grid):
    products = []
    for i in range(20 - 3):        # rows
        for j in range(3, 20):     # cols (need at least 3 to the left)
            group = [grid[i+k][j-k] for k in range(4)]
            products.append(math.prod(group))
    return max(products)
print(max_product_diagonal_rl(grid))

```

Problem 12: Highly divisible triangular numbers

```python
import math
def triangular_divisible(n):
    num = n*(n+1)/2
    return num

def count_divisors(num):
    count = 0
    root = int(math.isqrt(num))
    for i in range(1, root+1):
        if num % i == 0:
            count += 2  # i and num//i
    if root * root == num:
        count -= 1  # perfect square double-count fix
    return count

def first_triangular_with_divisors(limit):
    n = 1
    while True:
        num = n * (n + 1) // 2
        if count_divisors(num) > limit:
            return num
        n += 1

print(first_triangular_with_divisors(500))

```

Problem 14

```python
def collatz_length(n, memo):
    if n in memo:
        return memo[n]
    if n % 2 == 0:
        next_n = n // 2
    else:
        next_n = 3*n + 1
    memo[n] = 1 + collatz_length(next_n, memo)
    return memo[n]

def euler14(limit=10**6):
    memo = {1: 1}
    max_length = 1
    number = 1

    for i in range(2, limit):
        length = collatz_length(i, memo)
        if length > max_length:
            max_length = length
            number = i

    return number, max_length

print(euler14())   # → (837799, 525)

```
